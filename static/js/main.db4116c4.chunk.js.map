{"version":3,"sources":["NewIssue.js","IssueActions.js","Categories.js","Layout.js","App.js","serviceWorker.js","index.js"],"names":["NewIssue","React","useState","title","setTitle","description","setDescription","useMutation","CREATE_ISSUE","createIssue","loading","error","classes","useStyles","open","setOpen","Button","onClick","variant","color","Modal","onClose","aria-labelledby","aria-describedby","className","paper","message","id","TextField","value","onChange","e","target","text","label","valu","multiline","rows","rowsMax","actions","disabled","length","variables","then","makeStyles","theme","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","top","left","transform","breakpoints","down","marginTop","display","justifyContent","gql","IssueActions","categoryId","anchorEl","setAnchorEl","Boolean","MOVE_ISSUE","moveIssue","handleMove","IconButton","aria-label","aria-controls","aria-haspopup","event","currentTarget","Icon","Menu","keepMounted","PaperProps","style","maxHeight","ITEM_HEIGHT","options","map","option","MenuItem","key","selected","right","Categories","useSubscription","CATEGORIES","data","categories","category","Grid","item","sm","xs","Paper","name","issues","issue","empty","height","overflow","margin","textAlign","secondary","Layout","container","root","justify","flexGrow","control","categoryTitle","App","window","location","hostname","match","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.db4116c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useMutation, gql } from '@apollo/client';\r\n\r\nexport default function NewIssue() {\r\n  const [title, setTitle] = React.useState('');\r\n  const [description, setDescription] = React.useState('')\r\n  const [createIssue, { loading, error}] = useMutation(CREATE_ISSUE);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    createIssue({\r\n      variables: {\r\n        title,\r\n        description,\r\n      }\r\n    }).then(() => {\r\n      setOpen(false);\r\n      setTitle('');\r\n      setDescription('');\r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n        <Button onClick={handleOpen} variant=\"contained\" color=\"primary\">New Issue</Button>\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n        >\r\n            <div className={classes.paper}>\r\n              { loading && <p>Submitting issue...</p>}\r\n              { error && <p>{`Error! ${error.message}`}</p>}\r\n              <>\r\n                <h4 id=\"simple-modal-title\">Issue title</h4>\r\n                <TextField\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                    className={classes.text} \r\n                    id=\"outlined-basic\" \r\n                    label=\"Title of this Issue\" \r\n                    variant=\"outlined\" />\r\n                <h4 id=\"simple-modal-title\">Description</h4>\r\n                <TextField\r\n                    valu={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    className={classes.text}\r\n                    multiline \r\n                    rows={3} \r\n                    rowsMax={4} \r\n                    id=\"outlined-basic\" \r\n                    label=\"Write a comment...\" \r\n                    variant=\"outlined\" />\r\n                <div className={classes.actions}>\r\n                    <Button\r\n                        disabled={title.length === 0} \r\n                        onClick={handleSubmit} \r\n                        variant=\"contained\" \r\n                        color=\"primary\">\r\n                            Submmit new Issue\r\n                    </Button>\r\n                </div>\r\n              </>\r\n            </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 550,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n      [theme.breakpoints.down('xs')]: {\r\n        width: 250,\r\n      },\r\n    },\r\n    actions: {\r\n        marginTop: 20,\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n    },\r\n    text: {\r\n        width: '100%',\r\n    }\r\n  }));\r\n\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  const CREATE_ISSUE = gql`\r\n    mutation CreateIssue($title: String!, $description: String!) {\r\n      insert_issues(objects: {title: $title, description: $description}) {\r\n        returning {\r\n          id,\r\n          title,\r\n          description,\r\n        }\r\n      }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useMutation, gql } from '@apollo/client';\r\n\r\nexport default function IssueActions({id, categoryId}) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const classes = useStyles();\r\n\r\n  const [moveIssue] = useMutation(MOVE_ISSUE);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleMove = () => {\r\n    moveIssue({ variables: { id, categoryId: categoryId += 1}});\r\n  }\r\n\r\n  return (\r\n    <div className={classes.actions}>\r\n    { categoryId < 3 && <>\r\n        <IconButton\r\n            aria-label=\"more\"\r\n            aria-controls=\"long-menu\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleClick}\r\n        >\r\n            <Icon>more_vert</Icon>\r\n        </IconButton>\r\n        <Menu\r\n            id=\"long-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={open}\r\n            onClose={handleClose}\r\n            PaperProps={{\r\n            style: {\r\n                maxHeight: ITEM_HEIGHT * 4.5,\r\n                width: '20ch',\r\n            },\r\n            }}\r\n        >\r\n            {options.map((option) => (\r\n            <MenuItem key={option} selected={option === 'Pyxis'} onClick={handleMove}>\r\n                {option}\r\n            </MenuItem>\r\n            ))}\r\n        </Menu>\r\n      </>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst options = [\r\n    'Move',\r\n  ];\r\n  \r\nconst ITEM_HEIGHT = 48;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    actions: {\r\n      position: 'absolute',\r\n      top: 15,\r\n      right: 10,\r\n    },\r\n}));\r\n\r\nconst MOVE_ISSUE = gql`\r\n    mutation MoveIssue ($id: Int!, $categoryId: Int!) {\r\n        update_issues(_set: {categoryId: $categoryId}, where: {id: {_eq: $id}}) {\r\n        returning {\r\n            id\r\n        }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { gql, useSubscription } from '@apollo/client';\r\nimport IssueActions from './IssueActions';\r\n\r\nexport default function Categories() {\r\n  const classes = useStyles();\r\n  const { loading, error, data } = useSubscription(CATEGORIES);\r\n\r\n  if (loading) return 'Loading...';\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <>\r\n        {data.categories.map((category) => (\r\n        <Grid key={category.id} item sm={4} xs={12}>\r\n            <Paper className={classes.category} >\r\n                <div className={classes.title}><h2>{category.name}</h2></div>\r\n                    {category.issues.map((issue) => (\r\n                        <Paper key={issue.id} className={classes.issue}>\r\n                            <h4>{issue.title}</h4>\r\n                            <p>{issue.description}</p>\r\n                            <div><IssueActions {...issue}/></div>\r\n                        </Paper>\r\n                    ))}\r\n                    {category.issues.length === 0 && <div className={classes.empty}><h4>No Issues</h4></div>}\r\n            </Paper>\r\n        </Grid>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    category: {\r\n      backgroundColor: 'rgb(244, 244, 244)',\r\n      padding: theme.spacing(1),\r\n      height: '100%',\r\n      overflow: 'auto',\r\n      [theme.breakpoints.down('xs')]: {\r\n        height: '13rem',\r\n      },\r\n    },\r\n    title: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    issue: {\r\n      position: 'relative',\r\n      padding: theme.spacing(1),\r\n      margin: theme.spacing(1),\r\n    },\r\n    empty: {\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    }\r\n  }));\r\n\r\nexport const CATEGORIES = gql`\r\n    subscription {\r\n        categories {\r\n            id\r\n            name\r\n            issues(order_by: {updated_at: desc}) {\r\n                title\r\n                description\r\n                id,\r\n                categoryId,\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport NewIssue from './NewIssue';\r\nimport Categories from './Categories';\r\n\r\nexport default function Layout() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container className={classes.root} spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Grid container justify=\"flex-end\">\r\n            <NewIssue />\r\n        </Grid>\r\n        <br />\r\n        <Grid container justify=\"center\" spacing={1}>\r\n          <Categories />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      padding: theme.spacing(2),\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      backgroundColor: 'rgb(244, 244, 244)',\r\n      height: 240,\r\n      width: 200,\r\n    },\r\n    control: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    categoryTitle: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    issue: {\r\n      padding: theme.spacing(1),\r\n      margin: theme.spacing(1),\r\n    }\r\n  }));\r\n","import React from 'react';\nimport './App.css';\nimport Layout from './Layout';\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider, split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\n\nconst httpLink = new HttpLink({\n  uri: 'https://awesome-hasura-dashboard.herokuapp.com/v1/graphql'\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `wss://awesome-hasura-dashboard.herokuapp.com/v1/graphql`,\n  options: {\n    reconnect: true\n  }\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}